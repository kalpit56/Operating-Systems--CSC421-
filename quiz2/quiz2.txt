QUIZ 2

Name: Kalpit Mody

Date out: 26 aug 2020
Date due:  2 sep 2020


grade: 4/4


Copy this file to your own _username_/quiz2/ folder. Do not modify
anything in the class folder, else subversion will stop your commits! 
Put your name where it says "Name".


Concerning Makefile:

1) What does the word target do? 
   Why are the words printed in the correct order?
	The words target calls word-3 which calls word-2 which calls word-1 which echos or prints the word "The". After this, it goes back to word-2 which prints "price". Then it goes back to word-3 which prints "is". Lastly, we go back to the words target and print "right!". We do this because the other targets are called inside one another. The words are printed in the correct order because we have set it up where we call the appropriate target within each target. We have mapped it to go through to print word-1 one first, word-2 second, and so on.
   	
2) Change the target to write "is The price right!"
	It would become:
	words: word-2
		@echo right!
	word-1: word-3
		@echo -n The\
	word-2: word-1
		@echo -n price\
	word-3: @echo -n is\
	(I have made this change in the Makefile as well!)

2) What does the count target do?
   What idea was used to printout a count.
	The count target calls make count-1 three time. The count-1 target echos or writes "" into a file called count.txt. It then pipes the number of characters of count.txt onto the screen. It does this three times because the count target makes the count-1 target three times. After this, the count target removes the count.txt file. 
	The idea of printing out the character count in the count.txt file was used in order to print out a count. Everytime we call the count-1 target we add a character to count.txt. This idea helps us print out a count.

3) Modify the count target to count by 7's starting and 7 and ending at 21.
	count: 
		@make count-1
		@make count-1
		@make count-1
		rm count.txt
	count-1: 
		@echo "       " >> count.txt
		@cat count.txt | wc -c
			
4) What does the target hello do?
	The target hello calls the hello.c target which then adds an include statement and a main function into hello.c. After that, we call cc -o hello hello.c in order to compile the file. 		

Concerning Makefile-hello

5) Based on the hello target in Makefile, write a makefile that builds
   a program like the hello.c program, but instead of hello world, prints
   out whatever is in the greetings-file.txt file.

   a- correct behavior should rebuilt the hello.c file when the 
      greetings-file.txt file changes.
   b- correct behavior should rebuid hello when hello.c changes.
   c- correct behavior should not rebuild things unnecessarily.
   d- correct behavior will create a clean target that cleans up the
      build products
   e- correct solutions should fill in the created and last updated 
      with the student name, and some revision/creation date.

	I made the changes in the Makefile-hello.
